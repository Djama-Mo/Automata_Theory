# ex: set ro:
# DO NOT EDIT.
# generated by smc (http://smc.sourceforge.net/)
# from file : smc_project.sm

import statemap


class AppclassState(statemap.State):

    def Entry(self, fsm):
        pass

    def Exit(self, fsm):
        pass

    def Array(self, fsm):
        self.Default(fsm)

    def CommaSym(self, fsm, letter):
        self.Default(fsm)

    def Digit(self, fsm, Letteer):
        self.Default(fsm)

    def Digit(self, fsm, letter):
        self.Default(fsm)

    def EOS(self, fsm):
        self.Default(fsm)

    def EqSym(self, fsm):
        self.Default(fsm)

    def FigBracketSym(self, fsm):
        self.Default(fsm)

    def Letter(self, fsm, letter):
        self.Default(fsm)

    def Minus(self, fsm, letter):
        self.Default(fsm)

    def SqBracketSym(self, fsm):
        self.Default(fsm)

    def Unknown(self, fsm):
        self.Default(fsm)

    def Default(self, fsm):
        msg = "\n\tState: %s\n\tTransition: %s" % (
            fsm.getState().getName(), fsm.getTransition())
        raise statemap.TransitionUndefinedException(msg)

class MainMap_Default(AppclassState):

    def Array(self, fsm):
        ctxt = fsm.getOwner()
        fsm.getState().Exit(fsm)
        fsm.clearState()
        try:
            ctxt.ClearSMC()
        finally:
            fsm.setState(MainMap.Array)
            fsm.getState().Entry(fsm)


    def Letter(self, fsm, letter):
        ctxt = fsm.getOwner()
        fsm.getState().Exit(fsm)
        fsm.clearState()
        try:
            ctxt.Unacceptable()
        finally:
            fsm.setState(MainMap.Error)
            fsm.getState().Entry(fsm)


    def Digit(self, fsm, Letteer):
        ctxt = fsm.getOwner()
        fsm.getState().Exit(fsm)
        fsm.clearState()
        try:
            ctxt.Unacceptable()
        finally:
            fsm.setState(MainMap.Error)
            fsm.getState().Entry(fsm)


    def SqBracketSym(self, fsm):
        ctxt = fsm.getOwner()
        fsm.getState().Exit(fsm)
        fsm.clearState()
        try:
            ctxt.Unacceptable()
        finally:
            fsm.setState(MainMap.Error)
            fsm.getState().Entry(fsm)


    def EqSym(self, fsm):
        ctxt = fsm.getOwner()
        fsm.getState().Exit(fsm)
        fsm.clearState()
        try:
            ctxt.Unacceptable()
        finally:
            fsm.setState(MainMap.Error)
            fsm.getState().Entry(fsm)


    def CommaSym(self, fsm, letter):
        ctxt = fsm.getOwner()
        fsm.getState().Exit(fsm)
        fsm.clearState()
        try:
            ctxt.Unacceptable()
        finally:
            fsm.setState(MainMap.Error)
            fsm.getState().Entry(fsm)


    def Minus(self, fsm, letter):
        ctxt = fsm.getOwner()
        fsm.getState().Exit(fsm)
        fsm.clearState()
        try:
            ctxt.Unacceptable()
        finally:
            fsm.setState(MainMap.Error)
            fsm.getState().Entry(fsm)


    def FigBracketSym(self, fsm):
        ctxt = fsm.getOwner()
        fsm.getState().Exit(fsm)
        fsm.clearState()
        try:
            ctxt.Unacceptable()
        finally:
            fsm.setState(MainMap.Error)
            fsm.getState().Entry(fsm)


    def Unknown(self, fsm):
        ctxt = fsm.getOwner()
        fsm.getState().Exit(fsm)
        fsm.clearState()
        try:
            ctxt.Unacceptable()
        finally:
            fsm.setState(MainMap.Error)
            fsm.getState().Entry(fsm)


    def EOS(self, fsm):
        ctxt = fsm.getOwner()
        fsm.getState().Exit(fsm)
        fsm.clearState()
        try:
            ctxt.Unacceptable()
        finally:
            fsm.setState(MainMap.Error)
            fsm.getState().Entry(fsm)


class MainMap_Array(MainMap_Default):

    def Digit(self, fsm, letter):
        ctxt = fsm.getOwner()
        endState = fsm.getState()
        fsm.clearState()
        try:
            ctxt.Memorise(letter)
            ctxt.CountInc()
        finally:
            fsm.setState(endState)


    def Letter(self, fsm, letter):
        ctxt = fsm.getOwner()
        endState = fsm.getState()
        fsm.clearState()
        try:
            ctxt.Memorise(letter)
            ctxt.CountInc()
        finally:
            fsm.setState(endState)


    def SqBracketSym(self, fsm):
        ctxt = fsm.getOwner()
        if ctxt.CheckName() :
            fsm.getState().Exit(fsm)
            fsm.clearState()
            try:
                ctxt.CountZero()
                ctxt.SaveName()
            finally:
                fsm.setState(MainMap.ElementsCount)
                fsm.getState().Entry(fsm)
        else:
            MainMap_Default.SqBracketSym(self, fsm)
        
class MainMap_ElementsCount(MainMap_Default):

    def Digit(self, fsm, letter):
        ctxt = fsm.getOwner()
        if ctxt.CheckCount() :
            endState = fsm.getState()
            fsm.clearState()
            try:
                ctxt.MemoriseCnt(letter)
                ctxt.CountInc()
            finally:
                fsm.setState(endState)
        else:
            MainMap_Default.Digit(self, fsm, letter)
        
    def EqSym(self, fsm):
        ctxt = fsm.getOwner()
        if ctxt.NonZero() :
            endState = fsm.getState()
            fsm.clearState()
            try:
                ctxt.CountInc()
            finally:
                fsm.setState(endState)
        else:
            MainMap_Default.EqSym(self, fsm)
        
    def FigBracketSym(self, fsm):
        ctxt = fsm.getOwner()
        if ctxt.NonZero() :
            fsm.getState().Exit(fsm)
            fsm.clearState()
            try:
                ctxt.CountZero()
            finally:
                fsm.setState(MainMap.Elements)
                fsm.getState().Entry(fsm)
        else:
            MainMap_Default.FigBracketSym(self, fsm)
        
    def SqBracketSym(self, fsm):
        ctxt = fsm.getOwner()
        endState = fsm.getState()
        fsm.clearState()
        try:
            ctxt.CountInc()
        finally:
            fsm.setState(endState)


class MainMap_Elements(MainMap_Default):

    def CommaSym(self, fsm, letter):
        ctxt = fsm.getOwner()
        if ctxt.NonZero() :
            endState = fsm.getState()
            fsm.clearState()
            try:
                ctxt.MemoriseElem(letter)
                ctxt.CountInc()
            finally:
                fsm.setState(endState)
        else:
            MainMap_Default.CommaSym(self, fsm, letter)
        
    def Digit(self, fsm, letter):
        ctxt = fsm.getOwner()
        fsm.getState().Exit(fsm)
        fsm.clearState()
        try:
            ctxt.MemoriseElem(letter)
            ctxt.CountInc()
        finally:
            fsm.setState(MainMap.Elements)
            fsm.getState().Entry(fsm)


    def EOS(self, fsm):
        ctxt = fsm.getOwner()
        fsm.getState().Exit(fsm)
        fsm.clearState()
        try:
            ctxt.Acceptable()
        finally:
            fsm.setState(MainMap.OK)
            fsm.getState().Entry(fsm)


    def FigBracketSym(self, fsm):
        ctxt = fsm.getOwner()
        if ctxt.NecEl() :
            endState = fsm.getState()
            fsm.clearState()
            try:
                ctxt.CountZero()
            finally:
                fsm.setState(endState)
        else:
            MainMap_Default.FigBracketSym(self, fsm)
        
    def Minus(self, fsm, letter):
        ctxt = fsm.getOwner()
        endState = fsm.getState()
        fsm.clearState()
        try:
            ctxt.MemoriseElem(letter)
            ctxt.CountInc()
        finally:
            fsm.setState(endState)


class MainMap_OK(MainMap_Default):

    def EOS(self, fsm):
        ctxt = fsm.getOwner()
        endState = fsm.getState()
        fsm.clearState()
        try:
            ctxt.Acceptable()
            ctxt.Printok()
        finally:
            fsm.setState(endState)


class MainMap_Error(MainMap_Default):

    def EOS(self, fsm):
        ctxt = fsm.getOwner()
        endState = fsm.getState()
        fsm.clearState()
        try:
            ctxt.Unacceptable()
            ctxt.Printerror()
        finally:
            fsm.setState(endState)


class MainMap(object):

    Array = MainMap_Array('MainMap.Array', 0)
    ElementsCount = MainMap_ElementsCount('MainMap.ElementsCount', 1)
    Elements = MainMap_Elements('MainMap.Elements', 2)
    OK = MainMap_OK('MainMap.OK', 3)
    Error = MainMap_Error('MainMap.Error', 4)
    Default = MainMap_Default('MainMap.Default', -1)

class Appclass_sm(statemap.FSMContext):

    def __init__(self, owner):
        statemap.FSMContext.__init__(self, MainMap.Array)
        self._owner = owner

    def __getattr__(self, attrib):
        def trans_sm(*arglist):
            self._transition = attrib
            getattr(self.getState(), attrib)(self, *arglist)
            self._transition = None
        return trans_sm

    def enterStartState(self):
        self._state.Entry(self)

    def getOwner(self):
        return self._owner

# Local variables:
#  buffer-read-only: t
# End:
